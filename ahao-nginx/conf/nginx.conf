#user  nobody; # worker 进程的用户
worker_processes  1; # worker 进程数, 一般和 CPU 核数相等

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  info; # 日志级别 debug < info < notice < warn < error < crit

pid        logs/nginx.pid; # 记录 nginx 进程的 pid


events {
    use epoll; # 默认使用 epoll
    worker_connections  10240; # 每个 worker 允许连接的客户端最大连接数
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on; # 使用高效文件传输, 提升传输性能
    #tcp_nopush     on; # 需要开启 sendfile, 等待数据表积累一定大小后才发送, 提高了效率

    #   keepalive_timeout  0;
    keepalive_timeout  65; # 设置客户端与服务端请求的超时时间, 单位:秒

    gzip  on;          # 开启压缩
    gzip_min_length 1; # 小于1字节文件不压缩
    gzip_comp_level 3; # 压缩级别, 1-9
    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png application/json;

    upstream tomcats {
        server 127.0.0.1:18080;
        server 127.0.0.1:28080;
    }

    server {
        listen       80;
        server_name  localhost;

        add_header 'Access-Control-Allow-Origin' *;           # 允许跨域请求的域
        add_header 'Access-Control-Allow-Credentials' 'true'; # 允许带上 cookie
        add_header 'Access-Control-Allow-Methods' *;          # 允许请求的方法, 比如 GET/POST
        add_header 'Access-Control-Allow-Headers' *;          # 允许请求的 header

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}

        location /static {
            valid_referers none blocked server_names
                           *.example.com example.* www.example.org/galleries/
                           ~\.google\.; # 请求头的 refer 满足的情况下, $invalid_referer 为 0, 否则为 1
            if ($invalid_referer) {
                return 403;
            }
            alias /webroot/res;
        }
        location /api {
            proxy_pass http://tomcats;
        }


    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
